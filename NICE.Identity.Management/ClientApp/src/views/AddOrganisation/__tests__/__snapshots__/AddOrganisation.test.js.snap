// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddOrganisation should match the snapshot on load 1`] = `
<Fragment>
  <Breadcrumbs>
    <Breadcrumb
      elementType={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "propTypes": Object {
            "innerRef": [Function],
            "onClick": [Function],
            "replace": [Function],
            "target": [Function],
            "to": [Function],
          },
          "render": [Function],
        }
      }
      to="/overview"
    >
      Administration
    </Breadcrumb>
    <Breadcrumb
      elementType={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "propTypes": Object {
            "innerRef": [Function],
            "onClick": [Function],
            "replace": [Function],
            "target": [Function],
            "to": [Function],
          },
          "render": [Function],
        }
      }
      to="/organisations"
    >
      Organisations
    </Breadcrumb>
    <Breadcrumb>
      Add organisation
    </Breadcrumb>
  </Breadcrumbs>
  <PageHeader
    heading="Add organisation"
  />
  <Grid
    elementType="div"
    equalHeight={false}
    gutter="standard"
    horizontalAlignment="left"
    reverse={false}
    verticalAlignment="top"
  >
    <GridItem
      cols={12}
      lg={4}
      md={6}
    >
      <form
        noValidate={true}
        onSubmit={[Function]}
      >
        <Input
          autoComplete="off"
          data-qa-sel="name-input-add-organisation"
          disabled={false}
          error={false}
          errorMessage="Organisation name should be alphanumeric and should not exceed 100 characters"
          label="Organisation name"
          maxLength="100"
          minLength="2"
          name="orgName"
          onBlur={[Function]}
          onChange={[Function]}
          pattern="^((?![<>]).)*$"
          required={true}
          type="text"
          value=""
        />
        <Button
          data-qa-sel="save-button-add-organisation"
          disabled={false}
          type="submit"
          variant="cta"
        >
          Save organisation
        </Button>
        <Button
          disabled={false}
          elementType={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "propTypes": Object {
                "innerRef": [Function],
                "onClick": [Function],
                "replace": [Function],
                "target": [Function],
                "to": [Function],
              },
              "render": [Function],
            }
          }
          to="/organisations"
          variant="secondary"
        >
          Cancel
        </Button>
      </form>
    </GridItem>
  </Grid>
</Fragment>
`;

exports[`AddOrganisation should show error message when fetchData post call returns 401 error 1`] = `
Array [
  Array [
    <nav
      aria-label="Breadcrumbs"
      role="navigation"
    >
      <ol
        className="breadcrumbs"
      >
        <li
          className="breadcrumbs__crumb"
        >
          <a
            href="/overview"
            onClick={[Function]}
          >
            Administration
          </a>
        </li>
        <li
          className="breadcrumbs__crumb"
        >
          <a
            href="/organisations"
            onClick={[Function]}
          >
            Organisations
          </a>
        </li>
        <li
          className="breadcrumbs__crumb"
        >
          <span>
            Add organisation
          </span>
        </li>
      </ol>
    </nav>,
    <script
      dangerouslySetInnerHTML={
        Object {
          "__html": "{
  \\"@context\\": \\"http://schema.org\\",
  \\"@type\\": \\"BreadcrumbList\\",
  \\"itemListElement\\": [
    {
      \\"@type\\": \\"ListItem\\",
      \\"position\\": 1,
      \\"item\\": {
        \\"@id\\": \\"/overview\\",
        \\"name\\": \\"Administration\\"
      }
    },
    {
      \\"@type\\": \\"ListItem\\",
      \\"position\\": 2,
      \\"item\\": {
        \\"@id\\": \\"/organisations\\",
        \\"name\\": \\"Organisations\\"
      }
    },
    {
      \\"@type\\": \\"ListItem\\",
      \\"position\\": 3,
      \\"item\\": {
        \\"name\\": \\"Add organisation\\"
      }
    }
  ]
}",
        }
      }
      type="application/ld+json"
    />,
  ],
  <div
    className="page-header"
  >
    <h1
      className="page-header__heading"
    >
      Add organisation
    </h1>
  </div>,
  <div
    className="grid"
  >
    <div
      data-g="12 md:6 lg:4"
    >
      <form
        noValidate={true}
        onSubmit={[Function]}
      >
        <div
          className="input"
        >
          <label
            className="input__label"
            htmlFor="orgName"
          >
            Organisation name
          </label>
          <input
            autoComplete="off"
            className="input__input"
            data-qa-sel="name-input-add-organisation"
            disabled={false}
            id="orgName"
            maxLength="100"
            minLength="2"
            name="orgName"
            onBlur={[Function]}
            onChange={[Function]}
            pattern="^((?![<>]).)*$"
            required={true}
            type="text"
            value=""
          />
        </div>
        <button
          className="btn btn--cta"
          data-qa-sel="save-button-add-organisation"
          disabled={false}
          type="submit"
        >
          Save organisation
        </button>
        <a
          className="btn btn--secondary"
          disabled={false}
          href="/organisations"
          onClick={[Function]}
        >
          Cancel
        </a>
      </form>
    </div>
  </div>,
]
`;

exports[`DeleteUser should match the snapshot on load 1`] = `
<Fragment>
  <Breadcrumbs>
    <Breadcrumb
      elementType={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "propTypes": Object {
            "innerRef": [Function],
            "onClick": [Function],
            "replace": [Function],
            "target": [Function],
            "to": [Function],
          },
          "render": [Function],
        }
      }
      to="/overview"
    >
      Administration
    </Breadcrumb>
    <Breadcrumb
      elementType={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "propTypes": Object {
            "innerRef": [Function],
            "onClick": [Function],
            "replace": [Function],
            "target": [Function],
            "to": [Function],
          },
          "render": [Function],
        }
      }
      to="/organisations"
    >
      Organisations
    </Breadcrumb>
    <Breadcrumb>
      Add organisation
    </Breadcrumb>
  </Breadcrumbs>
  <PageHeader
    heading="Add organisation"
  />
  <Grid
    elementType="div"
    equalHeight={false}
    gutter="standard"
    horizontalAlignment="left"
    reverse={false}
    verticalAlignment="top"
  >
    <GridItem
      cols={12}
      lg={4}
      md={6}
    >
      <form
        noValidate={true}
        onSubmit={[Function]}
      >
        <Input
          autoComplete="off"
          data-qa-sel="name-input-add-organisation"
          disabled={false}
          error={false}
          errorMessage="Organisation name should be alphanumeric and should not exceed 100 characters"
          label="Organisation name"
          maxLength="100"
          minLength="2"
          name="orgName"
          onBlur={[Function]}
          onChange={[Function]}
          pattern="^((?![<>]).)*$"
          required={true}
          type="text"
          value=""
        />
        <Button
          data-qa-sel="save-button-add-organisation"
          disabled={false}
          type="submit"
          variant="cta"
        >
          Save organisation
        </Button>
        <Button
          disabled={false}
          elementType={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "propTypes": Object {
                "innerRef": [Function],
                "onClick": [Function],
                "replace": [Function],
                "target": [Function],
                "to": [Function],
              },
              "render": [Function],
            }
          }
          to="/organisations"
          variant="secondary"
        >
          Cancel
        </Button>
      </form>
    </GridItem>
  </Grid>
</Fragment>
`;

exports[`DeleteUser should show error message when fetchData post call returns 401 error 1`] = `
Array [
  Array [
    <nav
      aria-label="Breadcrumbs"
      role="navigation"
    >
      <ol
        className="breadcrumbs"
      >
        <li
          className="breadcrumbs__crumb"
        >
          <a
            href="/overview"
            onClick={[Function]}
          >
            Administration
          </a>
        </li>
        <li
          className="breadcrumbs__crumb"
        >
          <a
            href="/organisations"
            onClick={[Function]}
          >
            Organisations
          </a>
        </li>
        <li
          className="breadcrumbs__crumb"
        >
          <span>
            Add organisation
          </span>
        </li>
      </ol>
    </nav>,
    <script
      dangerouslySetInnerHTML={
        Object {
          "__html": "{
  \\"@context\\": \\"http://schema.org\\",
  \\"@type\\": \\"BreadcrumbList\\",
  \\"itemListElement\\": [
    {
      \\"@type\\": \\"ListItem\\",
      \\"position\\": 1,
      \\"item\\": {
        \\"@id\\": \\"/overview\\",
        \\"name\\": \\"Administration\\"
      }
    },
    {
      \\"@type\\": \\"ListItem\\",
      \\"position\\": 2,
      \\"item\\": {
        \\"@id\\": \\"/organisations\\",
        \\"name\\": \\"Organisations\\"
      }
    },
    {
      \\"@type\\": \\"ListItem\\",
      \\"position\\": 3,
      \\"item\\": {
        \\"name\\": \\"Add organisation\\"
      }
    }
  ]
}",
        }
      }
      type="application/ld+json"
    />,
  ],
  <div
    className="page-header"
  >
    <h1
      className="page-header__heading"
    >
      Add organisation
    </h1>
  </div>,
  <div
    className="grid"
  >
    <div
      data-g="12 md:6 lg:4"
    >
      <form
        noValidate={true}
        onSubmit={[Function]}
      >
        <div
          className="input"
        >
          <label
            className="input__label"
            htmlFor="orgName"
          >
            Organisation name
          </label>
          <input
            autoComplete="off"
            className="input__input"
            data-qa-sel="name-input-add-organisation"
            disabled={false}
            id="orgName"
            maxLength="100"
            minLength="2"
            name="orgName"
            onBlur={[Function]}
            onChange={[Function]}
            pattern="^((?![<>]).)*$"
            required={true}
            type="text"
            value=""
          />
        </div>
        <button
          className="btn btn--cta"
          data-qa-sel="save-button-add-organisation"
          disabled={false}
          type="submit"
        >
          Save organisation
        </button>
        <a
          className="btn btn--secondary"
          disabled={false}
          href="/organisations"
          onClick={[Function]}
        >
          Cancel
        </a>
      </form>
    </div>
  </div>,
]
`;
